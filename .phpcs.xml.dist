<?xml version="1.0"?>
<ruleset name="WordPress Coding Standards for WPGraphQL Plugins" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">
	<description>Sniffs for WPGraphQL Content Blocks</description>

	<!-- What to scan: include any root-level PHP files, and the /includes folder -->
	<file>./wp-graphql-content-blocks.php</file>
	<file>./includes/</file>
	<exclude-pattern>/vendor/</exclude-pattern>
	<exclude-pattern>/node_modules/</exclude-pattern>
	<exclude-pattern>**/tests/**</exclude-pattern>

	<!-- How to scan: include CLI args so you don't need to pass them manually -->
	<!-- Usage instructions: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage -->
	<!-- Annotated ruleset: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->

	<!-- Show sniff and progress -->
	<arg value="sp"/>
	<!-- Strip the file paths down to the relevant bit -->
	<arg name="basepath" value="./"/>
	<!-- Enable colors in report -->
	<arg name="colors"/>
	<!-- Only lint php files by default -->
	<arg name="extensions" value="php"/>
	<!-- Whenever possible, cache the scan results and re-use those for unchanged files on the next scan. -->
	<arg name="cache" value="tests/_output/cache.json" />
	<!-- Enables parallel processing when available for faster results. -->
	<arg name="parallel" value="20"/>
	<!-- Set severity to 1 to see everything that isn't effectively turned off. -->
	<arg name="severity" value="1" />

	<!-- Ruleset Config: set these to match your project constraints-->

	<!--
		Tests for PHP version compatibility.
		https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards#Recomended-additional-rulesets
	-->
	<config name="testVersion" value="7.4-"/>

	<!--
		Tests for WordPress version compatibility.
		https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties
	-->
	<config name="minimum_supported_wp_version" value="5.3"/>

	<!-- Rules: WPGraphQL Coding Standards -->
	<!-- https://github.com/AxeWP/WPGraphQL-Coding-Standards/WPGraphQL/ruleset.xml -->
	<rule ref="WPGraphQL">
		<!-- The is the only thing missing from WPEngine-Strict -->
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />
		<!-- This should be excluded upstream in the ruleset-->
		<exclude name="WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase" />
		<!-- These maybe should be added back later -->
		<exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification" />
		<exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification" />
		<exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification" />
		<exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingAnyTypeHint" />
		<exclude name="WordPressVIPMinimum.Functions.RestrictedFunctions.wp_remote_get_wp_remote_get" />
	</rule>

	<!-- Individual rule configuration -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<!-- Value: replace the function, class, and variable prefixes used. Separate multiple prefixes with a comma. -->
			<property name="prefixes" type="array">
				<element value="wpgraphql\content_blocks" />
				<element value="WPGRAPHQL\CONTENT_BLOCKS" />
				<element value="WPGraphQL\ContentBlocks" />
				<element value="wpgraphql_content_blocks_" />
				<element value="WPGraphQLContentBlocks" />
			</property>
		</properties>
	</rule>

	<rule ref="WordPress.WP.I18n">
		<properties>
			<!-- Value: replace the text domain used. -->
			<property name="text_domain" type="array" value="wp-graphql-content-blocks" />
		</properties>
	</rule>

	
	<!-- Exclude rules that break PHP Unit test conventions or result in redundant comments. -->
	<!-- Test functions and properties are self-describing. -->
	<!-- @todo These shouldnt be necessary, since tests are excluded -->
	<rule ref="Generic.Commenting.DocComment.MissingShort">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<!-- Test file names are self-describing. -->
	<rule ref="Squiz.Commenting.FileComment">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<!-- Test class names are self-describing. -->
	<rule ref="Squiz.Commenting.ClassComment.Missing">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<!-- Test function names are self-describing. -->
	<rule ref="Squiz.Commenting.FunctionComment">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<!-- Test variables should be self-describing. -->
	<rule ref="Squiz.Commenting.VariableComment.Missing">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<!-- Test functions are not public so do not require @throws docblock annotations. -->
	<rule ref="Squiz.Commenting.FunctionCommentThrowTag.Missing">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<!-- Multiple assignments are used as part of test setup. -->
	<rule ref="Squiz.PHP.DisallowMultipleAssignments.Found">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<rule ref="WordPress.NamingConventions">
		<exclude-pattern>/includes/utilities/DomHelpers.php</exclude-pattern>
	</rule>

	<!-- We follow the Codeception class name convention instead of the WordPress one. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedClassFound">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<!-- Test globals don't require prefixes. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<!-- `json_encode()` is fine for tests. -->
	<rule ref="WordPress.WP.AlternativeFunctions.json_encode_json_encode">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<!-- Allow queries, DROP and general database manipulation in tests. -->
	<rule ref="WordPress.DB">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

	<!-- Suppress warnings about the _before() test methods used in Codeception tests. -->
	<rule ref="PSR2.Methods.MethodDeclaration.Underscore">
		<exclude-pattern>/tests/</exclude-pattern>
	</rule>

</ruleset>
